     1                                  extern printf
     2                                  extern scanf
     3                                  
     4                                  global interview
     5                                  
     6                                  segment .data
     7                                  
     8 00000000 257300                  stringFormat db "%s", 0            ; Format for strings
     9 00000003 256C6600                floatFormat db "%lf", 0             ; Format for floats
    10                                  
    11 00000007 48656C6C6F2025732E-     welcome db "Hello %s. I am Ms Fenster. The interview will begin now.", 10, 0                                ; Welcome Message
    11 00000010 204920616D204D7320-
    11 00000019 46656E737465722E20-
    11 00000022 54686520696E746572-
    11 0000002B 766965772077696C6C-
    11 00000034 20626567696E206E6F-
    11 0000003D 772E0A00           
    12 00000041 576F7721202425312E-     salary db "Wow! $%1.2lf That's a lot of cash. Who do you think you are, Chris Sawyer (y or n)?", 10, 0      ; Salary Message
    12 0000004A 326C66205468617427-
    12 00000053 732061206C6F74206F-
    12 0000005C 6620636173682E2057-
    12 00000065 686F20646F20796F75-
    12 0000006E 207468696E6B20796F-
    12 00000077 75206172652C204368-
    12 00000080 726973205361777965-
    12 00000089 72202879206F72206E-
    12 00000092 293F0A00           
    13 00000096 416C72696768742E20-     circuit db "Alright. Now we will work on your electricity.", 10, 0                                          ; Circuit Test Message
    13 0000009F 4E6F77207765207769-
    13 000000A8 6C6C20776F726B206F-
    13 000000B1 6E20796F757220656C-
    13 000000BA 656374726963697479-
    13 000000C3 2E0A00             
    14                                  
    15 000000C6 506C6561736520656E-     circuitQuestion1 db "Please enter the resistance of circuit #1 in ohms: ", 0                                  ; Circuit Question 1
    15 000000CF 746572207468652072-
    15 000000D8 6573697374616E6365-
    15 000000E1 206F66206369726375-
    15 000000EA 697420233120696E20-
    15 000000F3 6F686D733A2000     
    16 000000FA 576861742069732074-     circuitQuestion2 db "What is the resistance of circuit #2 in ohms: ", 0                                       ; Circuit Question 2
    16 00000103 686520726573697374-
    16 0000010C 616E6365206F662063-
    16 00000115 697263756974202332-
    16 0000011E 20696E206F686D733A-
    16 00000127 2000               
    17                                  
    18 00000129 54686520746F74616C-     circuitDone db "The total resistance is %1.3lf Ohms.", 10, 0                                                  ; Resistance message
    18 00000132 20726573697374616E-
    18 0000013B 63652069732025312E-
    18 00000144 336C66204F686D732E-
    18 0000014D 0A00               
    19                                  
    20 0000014F 5765726520796F7520-     compSciQuestion db "Were you a computer science major (y or n)? ", 0                                          ; Comp Sci Major Question
    20 00000158 6120636F6D70757465-
    20 00000161 7220736369656E6365-
    20 0000016A 206D616A6F72202879-
    20 00000173 206F72206E293F2000 
    21 0000017C 5468616E6B20796F75-     bye db "Thank you.  Please follow the exit signs to the front desk.", 10, 0                            ; Bye Message
    21 00000185 2E2020506C65617365-
    21 0000018E 20666F6C6C6F772074-
    21 00000197 686520657869742073-
    21 000001A0 69676E7320746F2074-
    21 000001A9 68652066726F6E7420-
    21 000001B2 6465736B2E0A00     
    22                                  
    23                                  section .bss
    24                                  
    25                                  segment .text
    26                                  
    27                                  interview:
    28                                  
    29                                  ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
    30 00000000 55                      push rbp                                                    ;Backup rbp
    31 00000001 4889E5                  mov  rbp,rsp                                                ;The base pointer now points to top of stack
    32 00000004 57                      push rdi                                                    ;Backup rdi
    33 00000005 56                      push rsi                                                    ;Backup rsi
    34 00000006 52                      push rdx                                                    ;Backup rdx
    35 00000007 51                      push rcx                                                    ;Backup rcx
    36 00000008 4150                    push r8                                                     ;Backup r8
    37 0000000A 4151                    push r9                                                     ;Backup r9
    38 0000000C 4152                    push r10                                                    ;Backup r10
    39 0000000E 4153                    push r11                                                    ;Backup r11
    40 00000010 4154                    push r12                                                    ;Backup r12
    41 00000012 4155                    push r13                                                    ;Backup r13
    42 00000014 4156                    push r14                                                    ;Backup r14
    43 00000016 4157                    push r15                                                    ;Backup r15
    44 00000018 53                      push rbx                                                    ;Backup rbx
    45 00000019 9C                      pushf                                                       ;Backup rflags
    46                                  
    47                                  
    48 0000001A 6AFF                    push qword -1                                               ;Now the number of pushes is even
    49                                  
    50                                  ;Registers rax, rip, and rsp are usually not backed up.
    51                                  
    52 0000001C 4989FF                  mov r15, rdi      ; Store name array
    53 0000001F F2440F10F8              movsd xmm15, xmm0 ; Store salary
    54                                  
    55                                  ; Welcome Message =======================================================================================
    56 00000024 6A00                    push qword 0
    57 00000026 B800000000              mov rax, 0
    58 0000002B 48BF-                   mov rdi, welcome        ;"Hello %s. I am Ms Fenster. The interview will begin now."
    58 0000002D [0700000000000000] 
    59 00000035 4C89FE                  mov rsi, r15
    60 00000038 E8(00000000)            call printf
    61 0000003D 58                      pop rax
    62                                  
    63                                  ; Print out salary message ===================================================================================
    64 0000003E 6A00                    push qword 0
    65 00000040 B801000000              mov rax, 1
    66 00000045 48BF-                   mov rdi, salary     ;"Wow! $%1.2lf That's a lot of cash. Who do you think you are, Chris Sawyer (y or n)?"
    66 00000047 [4100000000000000] 
    67 0000004F F2410F10C7              movsd xmm0, xmm15
    68 00000054 E8(00000000)            call printf
    69 00000059 58                      pop rax
    70                                  
    71                                  ; Get Question Answer y/n ====================================================================================
    72 0000005A 6A00                    push qword 0
    73 0000005C 48BF-                   mov rdi, stringFormat
    73 0000005E [0000000000000000] 
    74 00000066 4889E6                  mov rsi, rsp
    75 00000069 E8(00000000)            call scanf
    76 0000006E 58                      pop rax
    77                                  
    78 0000006F 41BE79000000            mov r14, 'y'
    79 00000075 4C39F0                  cmp rax, r14
    80 00000078 7514                    jne ResistanceTest          ; If answer is not 'y' go to test
    81                                  
    82 0000007A 48B80000000080842E-     mov rax, 0x412E848000000000   ; Put 1000000 into rax
    82 00000083 41                 
    83 00000084 664C0F6EF0              movq xmm14, rax               ; Put 1000000.00 into xmm14
    84 00000089 E93B010000              jmp end                       ; Jump to the end
    85                                  
    86                                  ;========================================================================================================
    87                                  ResistanceTest:
    88 0000008E 6A00                    push qword 0
    89 00000090 B800000000              mov rax, 0
    90 00000095 48BF-                   mov rdi, circuit        ;"Alright. Now we will work on your electricity."
    90 00000097 [9600000000000000] 
    91 0000009F E8(00000000)            call printf
    92 000000A4 58                      pop rax
    93                                  
    94                                  ;Ask first question==================================================================================
    95 000000A5 6A00                    push qword 0
    96 000000A7 B800000000              mov rax, 0
    97 000000AC 48BF-                   mov rdi, circuitQuestion1       ;"Please enter the resistance of circuit #1 in ohms: "
    97 000000AE [C600000000000000] 
    98 000000B6 E8(00000000)            call printf
    99 000000BB 58                      pop rax
   100                                  
   101                                  ;Take the first input and enter it into xmm10 ========================================================
   102 000000BC B801000000              mov rax, 1
   103 000000C1 48BF-                   mov rdi, floatFormat  ;%lf
   103 000000C3 [0300000000000000] 
   104 000000CB 6A00                    push qword 0
   105 000000CD 4889E6                  mov rsi, rsp
   106 000000D0 E8(00000000)            call scanf
   107 000000D5 F2440F101424            movsd xmm10, [rsp]    ;first input float now in xmm10
   108 000000DB 58                      pop rax
   109                                  
   110                                  ;Ask second question ==================================================================================
   111 000000DC 6A00                    push qword 0
   112 000000DE B800000000              mov rax, 0
   113 000000E3 48BF-                   mov rdi, circuitQuestion2     ;"What is the resistance of circuit #2 in ohms:
   113 000000E5 [FA00000000000000] 
   114 000000ED E8(00000000)            call printf
   115 000000F2 58                      pop rax
   116                                  
   117                                  ;Take the second input and enter it into xmm11  =======================================================
   118 000000F3 B801000000              mov rax, 1
   119 000000F8 48BF-                   mov rdi, floatFormat  ;%lf
   119 000000FA [0300000000000000] 
   120 00000102 6A00                    push qword 0
   121 00000104 4889E6                  mov rsi, rsp
   122 00000107 E8(00000000)            call scanf
   123 0000010C F2440F101C24            movsd xmm11, [rsp]  ;second input float now in xmm11
   124 00000112 58                      pop rax
   125                                  
   126                                  ;Get the inverse of the resistances ===================================================================
   127 00000113 41B801000000            mov r8, 1     ;r8 = 1
   128 00000119 F24D0F2AC0              cvtsi2sd xmm8, r8       ;xmm8=1
   129 0000011E F2450F5EC2              divsd xmm8, xmm10       ; xmm8 = xmm8/xmm10          ex: 1/8
   130 00000123 F2450F10D0              movsd xmm10, xmm8       ; xmm10 = xmm8
   131                                  
   132 00000128 F24D0F2AC0              cvtsi2sd xmm8, r8   ;xmm8=1
   133 0000012D F2450F5EC3              divsd xmm8, xmm11   ;xmm8 = xmm8/xmm11          ex: 1/8
   134 00000132 F2450F10D8              movsd xmm11, xmm8   ;xmm11 = xmm8
   135                                  
   136                                  ; Add the inverse resistances into xmm13 ===============================================================
   137 00000137 F2450F10EA              movsd xmm13, xmm10    ;xmm13 = xmm10
   138 0000013C F2450F58EB              addsd xmm13, xmm11    ;xmm13 = xmm13+xmm11
   139                                  
   140                                  ;Both ohms inverses have been added
   141                                  
   142                                  ; Inverse the result to get the resistance  ==============================================================
   143 00000141 41B801000000            mov r8, 1
   144 00000147 F24D0F2AC0              cvtsi2sd xmm8, r8   ;xmm8 = 1
   145 0000014C F2450F5EC5              divsd xmm8, xmm13   ;xmm8 = xmm8/xmm13
   146 00000151 F2450F10E8              movsd xmm13, xmm8   ;xmm13 = xmm8
   147                                  
   148                                  ; Print out circuitDone message =======================================================================
   149 00000156 6A00                    push qword 0
   150 00000158 B801000000              mov rax, 1
   151 0000015D 48BF-                   mov rdi, circuitDone      ;"The total resistance is %1.3lf Ohms."
   151 0000015F [2901000000000000] 
   152 00000167 F2410F10C5              movsd xmm0, xmm13
   153 0000016C E8(00000000)            call printf
   154 00000171 58                      pop rax
   155                                  
   156                                  ; Ask if CS Major?======================================================================================
   157 00000172 6A00                    push qword 0
   158 00000174 B800000000              mov rax, 0
   159 00000179 48BF-                   mov rdi, compSciQuestion
   159 0000017B [4F01000000000000] 
   160 00000183 E8(00000000)            call printf
   161 00000188 58                      pop rax
   162                                  
   163                                  ; Get Question Answer y/n =============================================================================
   164 00000189 6A00                    push qword 0
   165 0000018B 48BF-                   mov rdi, stringFormat   ;%s
   165 0000018D [0000000000000000] 
   166 00000195 4889E6                  mov rsi, rsp
   167 00000198 E8(00000000)            call scanf
   168 0000019D 58                      pop rax
   169                                  
   170 0000019E 41BE79000000            mov r14, 'y'
   171 000001A4 4C39F0                  cmp rax, r14
   172 000001A7 7411                    je csMajor ; If answer is not 'y' go to test
   173                                  
   174 000001A9 48B814AE47E17AC092-     mov rax, 0x4092C07AE147AE14   ; Put 1200.12 into rax
   174 000001B2 40                 
   175 000001B3 664C0F6EF0              movq xmm14, rax               ; Put 1200.12 into xmm14
   176 000001B8 EB0F                    jmp end                       ; Jump to the end
   177                                  
   178                                  csMajor:
   179 000001BA 48B848E17A140E7CF5-     mov rax, 0x40F57C0E147AE148   ; Put 88000.88 into rax
   179 000001C3 40                 
   180 000001C4 664C0F6EF0              movq xmm14, rax               ; Put 88000.88 into xmm14
   181                                  
   182                                  ;===================================================================================================
   183                                  end:
   184                                  ; Bye Message
   185 000001C9 6A00                    push qword 0
   186 000001CB B800000000              mov rax, 0
   187 000001D0 48BF-                   mov rdi, bye
   187 000001D2 [7C01000000000000] 
   188 000001DA E8(00000000)            call printf
   189 000001DF 58                      pop rax
   190                                  
   191 000001E0 F2410F10C6              movsd xmm0, xmm14     ;returns whichever xmm14 it needs
   192                                  
   193                                  ;Restore the original values to the general registers before returning to the caller.
   194 000001E5 58                      pop rax                                                     ;Remove the extra -1 from the stack
   195 000001E6 9D                      popf                                                        ;Restore rflags
   196 000001E7 5B                      pop rbx                                                     ;Restore rbx
   197 000001E8 415F                    pop r15                                                     ;Restore r15
   198 000001EA 415E                    pop r14                                                     ;Restore r14
   199 000001EC 415D                    pop r13                                                     ;Restore r13
   200 000001EE 415C                    pop r12                                                     ;Restore r12
   201 000001F0 415B                    pop r11                                                     ;Restore r11
   202 000001F2 415A                    pop r10                                                     ;Restore r10
   203 000001F4 4159                    pop r9                                                      ;Restore r9
   204 000001F6 4158                    pop r8                                                      ;Restore r8
   205 000001F8 59                      pop rcx                                                     ;Restore rcx
   206 000001F9 5A                      pop rdx                                                     ;Restore rdx
   207 000001FA 5E                      pop rsi                                                     ;Restore rsi
   208 000001FB 5F                      pop rdi                                                     ;Restore rdi
   209 000001FC 5D                      pop rbp                                                     ;Restore rbp
   210                                  
   211 000001FD C3                      ret
