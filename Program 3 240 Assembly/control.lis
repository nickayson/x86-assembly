     1                                   ;****************************************************************************************************************************
     2                                   ;Program name: "root".  This program demonstrates the input of 3 numbers and using them            *
     3                                   ;to calculate the roots of a quadratic formula. Copyright (C) 2021 Nicholas Ayson.                                                                           *
     4                                   ;                                                                                                                           *
     5                                   ;This file is part of the software program "root".                                                                   *
     6                                   ;root is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     7                                   ;version 3 as published by the Free Software Foundation.                                                                    *
     8                                   ;Perimeter is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
     9                                   ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    10                                   ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    11                                   ;****************************************************************************************************************************
    12                                  
    13                                   ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    14                                   ;
    15                                   ;Author information
    16                                   ;  Author name: Nicholas Ayson
    17                                   ;  Author email: nick.ayson@csu.fullerton.edu
    18                                   ;
    19                                  ;Program information
    20                                   ;  Program name: root
    21                                   ;  Programming languages: Two modules in c++ One modules in C and one module in X86
    22                                   ;  Date program began: 2021-Feb-23
    23                                  ;  Date of last update: 2021-Feb-28
    24                                  ;  Files in this program: Second_degree.c, Quadratic.asm, isfloat.cpp, Quad_library.cpp
    25                                   ;
    26                                  ;This file
    27                                   ;   File name: Quadratic.asm
    28                                   ;   Language: x86 assembly
    29                                   ;   Max page width: 304 columns
    30                                   ;   Assemble: nasm -f elf64 -l Quadratic.lis -o Quadratic.o Quadratic.asm
    31                                  ;   Link:g++ -m64 -fno-pie -no-pie -o a.out -std=c++17 Quad_library.o isfloat.o Second_degree.o Quadratic.o
    32                                  
    33                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    34                                  
    35                                  
    36                                  
    37                                  extern printf
    38                                  extern scanf
    39                                  extern fill
    40                                  extern display_array
    41                                  extern sum
    42                                  
    43                                  array_size equ 100        ; capacity limited to 100 in array
    44                                  
    45                                  global control
    46                                  
    47                                  segment .data
    48                                  
    49 00000000 256C6600                floatformat db "%lf", 0
    50 00000004 257300                  stringformat db "%s", 0
    51                                  
    52 00000007 57656C636F6D652074-     welcome db "Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Nicholas Ayson.",10,0
    52 00000010 6F20485341532E2054-
    52 00000019 686520616363757261-
    52 00000022 637920616E64207265-
    52 0000002B 6C696162696C697479-
    52 00000034 206F66207468697320-
    52 0000003D 70726F6772616D2069-
    52 00000046 732067756172616E74-
    52 0000004F 656564206279204E69-
    52 00000058 63686F6C6173204179-
    52 00000061 736F6E2E0A00       
    53                                  
    54 00000067 546865206E756D6265-     prompt1 db "The numbers you entered are these: ",10,0
    54 00000070 727320796F7520656E-
    54 00000079 746572656420617265-
    54 00000082 2074686573653A200A-
    54 0000008B 00                 
    55                                  
    56 0000008C 5468652073756D206F-     sumvalue db "The sum of these values is %5.8lf",10,0
    56 00000095 662074686573652076-
    56 0000009E 616C75657320697320-
    56 000000A7 25352E386C660A00   
    57                                  
    58 000000AF 54686520636F6E7472-     controlexit db "The control module will now return the sum to the caller module.", 10, 0
    58 000000B8 6F6C206D6F64756C65-
    58 000000C1 2077696C6C206E6F77-
    58 000000CA 2072657475726E2074-
    58 000000D3 68652073756D20746F-
    58 000000DC 207468652063616C6C-
    58 000000E5 6572206D6F64756C65-
    58 000000EE 2E0A00             
    59                                  
    60                                  
    61                                  
    62                                  segment .bss
    63                                  
    64 00000000 <res 00000320>          intarray: resq 100
    65                                  
    66                                  segment .text
    67                                  
    68                                  control:
    69                                  
    70                                  ;=============================================================================================
    71 00000000 55                      push rbp
    72 00000001 4889E5                  mov  rbp,rsp
    73 00000004 57                      push rdi                                                    ;Backup rdi
    74 00000005 56                      push rsi                                                    ;Backup rsi
    75 00000006 52                      push rdx                                                    ;Backup rdx
    76 00000007 51                      push rcx                                                    ;Backup rcx
    77 00000008 4150                    push r8                                                     ;Backup r8
    78 0000000A 4151                    push r9                                                     ;Backup r9
    79 0000000C 4152                    push r10                                                    ;Backup r10
    80 0000000E 4153                    push r11                                                    ;Backup r11
    81 00000010 4154                    push r12                                                    ;Backup r12
    82 00000012 4155                    push r13                                                    ;Backup r13
    83 00000014 4156                    push r14                                                    ;Backup r14
    84 00000016 4157                    push r15                                                    ;Backup r15
    85 00000018 53                      push rbx                                                    ;Backup rbx
    86 00000019 9C                      pushf
    87                                  
    88                                  
    89 0000001A 6A00                    push qword 0
    90                                  
    91                                  ;========================================Initialize=================================================================
    92 0000001C 41BE00000000            mov r14, 0                    ;register for number of elements in array
    93 00000022 41BD00000000            mov r13, 0                    ;register for sum of floats in array
    94                                  ;========================================================================================================================
    95                                  
    96                                  ;Display welcome message
    97 00000028 6A00                    push qword 0
    98 0000002A B800000000              mov rax, 0
    99 0000002F 48BF-                   mov rdi, welcome            ;"Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Nicholas Ayson."
    99 00000031 [0700000000000000] 
   100 00000039 E8(00000000)            call printf
   101 0000003E 58                      pop rax
   102                                  
   103                                  ;========================================Function call to fill============================================================
   104                                  
   105 0000003F 6A00                    push qword 0
   106 00000041 48BF-                   mov rdi, intarray
   106 00000043 [0000000000000000] 
   107 0000004B BE64000000              mov rsi, array_size
   108 00000050 B800000000              mov rax, 0
   109 00000055 E8(00000000)            call fill
   110 0000005A 4989C6                  mov r14, rax          ; saves copy of fill array into r14
   111 0000005D 58                      pop rax
   112                                  
   113                                  ;========================================Confirmation of inputs=====================================================
   114                                  
   115 0000005E 6A00                    push qword 0
   116 00000060 48BF-                   mov rdi, stringformat   ; change to float does not display
   116 00000062 [0400000000000000] 
   117 0000006A 48BE-                   mov rsi, prompt1        ;"The numbers you entered are these: "
   117 0000006C [6700000000000000] 
   118 00000074 B800000000              mov rax, 0
   119 00000079 E8(00000000)            call printf
   120 0000007E 58                      pop rax
   121                                  
   122                                  ;========================================Display array=============================================================
   123                                  
   124 0000007F 6A00                    push qword 0
   125 00000081 48BF-                   mov rdi, intarray
   125 00000083 [0000000000000000] 
   126 0000008B 4C89F6                  mov rsi, r14                            ;passes number of elements in array stored in r14
   127 0000008E B800000000              mov rax, 0
   128 00000093 E8(00000000)            call display_array                        ;calls display
   129 00000098 58                      pop rax
   130                                  
   131                                  ;================================================Call Sum================================================================
   132                                  
   133 00000099 6A00                     push qword 0
   134 0000009B 48BF-                    mov rdi, intarray
   134 0000009D [0000000000000000] 
   135 000000A5 4C89F6                   mov rsi, r14             ;passes number of elements in the array in r14
   136 000000A8 B800000000               mov rax, 0
   137 000000AD E8(00000000)             call sum                 ; call sum to add all floats in array
   138 000000B2 4989C5                   mov r13, rax           ;saves copy of sum functions output into r13
   139 000000B5 58                       pop rax
   140                                  
   141                                  ;=================================================Prints out Sum======================================================
   142                                  
   143 000000B6 6A00                    push qword 0
   144 000000B8 48BF-                   mov rdi, sumvalue
   144 000000BA [8C00000000000000] 
   145 000000C2 4C89EA                  mov rdx, r13
   146 000000C5 B800000000              mov rax, 0
   147 000000CA E8(00000000)            call printf
   148 000000CF 58                      pop rax
   149                                  
   150                                  ;=======================================================================================================================
   151                                  
   152 000000D0 6A00                    push qword 0
   153 000000D2 B800000000              mov rax, 0
   154 000000D7 48BF-                   mov rdi, controlexit
   154 000000D9 [AF00000000000000] 
   155 000000E1 E8(00000000)            call printf
   156 000000E6 58                      pop rax
   157                                  
   158 000000E7 58                      pop rax
   159 000000E8 4C89E8                  mov rax, r13      ; copies sum r13 to rax
   160                                  
   161                                  
   162                                  exit:
   163                                  ;===== Restore original values to integer registers ===================================================================
   164 000000EB 9D                      popf                                                        ;Restore rflags
   165 000000EC 5B                      pop rbx                                                     ;Restore rbx
   166 000000ED 415F                    pop r15                                                     ;Restore r15
   167 000000EF 415E                    pop r14                                                     ;Restore r14
   168 000000F1 415D                    pop r13                                                     ;Restore r13
   169 000000F3 415C                    pop r12                                                     ;Restore r12
   170 000000F5 415B                    pop r11                                                     ;Restore r11
   171 000000F7 415A                    pop r10                                                     ;Restore r10
   172 000000F9 4159                    pop r9                                                      ;Restore r9
   173 000000FB 4158                    pop r8                                                      ;Restore r8
   174 000000FD 59                      pop rcx                                                     ;Restore rcx
   175 000000FE 5A                      pop rdx                                                     ;Restore rdx
   176 000000FF 5E                      pop rsi                                                     ;Restore rsi
   177 00000100 5F                      pop rdi                                                     ;Restore rdi
   178 00000101 5D                      pop rbp                                                     ;Restore rbp
   179                                  
   180                                  
   181 00000102 C3                      ret
   182                                  
   183                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
